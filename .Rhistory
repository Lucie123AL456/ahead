library(ahead)
usethis::use_pkgdown()
pkgdown::build_site()
library(ahead)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("ahead-vignette")
usethis::use_testthat()
par(mfrow=c(3, 2))
plot(ahead::eatf(USAccDeaths, h=10, level=95))
plot(ahead::eatf(AirPassengers, h=10, level=95, type_pi = "T"))
plot(ahead::eatf(lynx, h=10, level=95, type_pi = "A"))
plot(ahead::eatf(WWWusage, h=10, level=95, type_pi = "E"))
plot(ahead::eatf(Nile, h=10, level=95))
plot(ahead::eatf(fdeaths, h=10, level=95))
library(ahead)
print(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5)))
tail(WWWusage)
plot(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5)))
plot(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5)))
plot(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5)))
plot(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.25, 0.25, 0.5)))
ahead::eatf(WWWusage, method = "EAT",
weights = c(0.25, 0.25, 0.5))
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(AirPassengers, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(lynx, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(WWWusage, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(Nile, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
par(mfrow=c(2, 2))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "linear"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "polynomial"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "radial"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "sigmoid"), predict_func = predict))
#
USAccDeaths
dynrmf(USAccDeaths, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict)
AirPassengers
dynrmf(AirPassengers, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict)
require(fpp)
print(ahead::ridge2f(fpp::insurance)$mean)
print(ahead::ridge2f(fpp::usconsumption)$lower)
res <- ahead::ridge2f(fpp::insurance, lags=2)
par(mfrow=c(1, 2))
plot(res, "Quotes")
plot(res, "TV.advert")
res <- ahead::ridge2f(fpp::insurance, h=10, lags=2)
par(mfrow=c(1, 2))
plot(res, "Quotes")
plot(res, "TV.advert")
fit_obj_VAR <- ahead::varf(fpp::insurance, lags = 2,
h = 10, level = 95)
fit_obj_ridge2 <- ahead::ridge2f(fpp::insurance, lags = 2,
h = 10, level = 95, type_pi = "bootstrap")
par(mfrow=c(2, 2))
plot(fit_obj_VAR, "Quotes")
plot(fit_obj_VAR, "TV.advert")
plot(fit_obj_ridge2, "Quotes")
plot(fit_obj_ridge2, "TV.advert")
plot(ahead::eatf(USAccDeaths, h=10, level=95))
plot(ahead::eatf(USAccDeaths, h=10, level=95))
plot(ahead::eatf(AirPassengers, h=10, level=95, type_pi = "T"))
plot(ahead::eatf(AirPassengers, h=10, level=95, type_pi = "E"))
plot(ahead::eatf(AirPassengers, h=10, level=95, type_pi = "A"))
ahead::eatf(AirPassengers, h=10, level=95, type_pi = "T")
ahead::eatf(AirPassengers, h=10, level=95, type_pi = "T")
plot(ahead::eatf(lynx, h=10, level=95, type_pi = "A"))
plot(ahead::eatf(WWWusage, h=10, level=95, type_pi = "E"))
plot(ahead::eatf(Nile, h=10, level=95))
plot(ahead::eatf(fdeaths, h=10, level=95))
plot(ahead::eatf(fdeaths, h=20, level=95))
-qnorm(0.5 - level/200)*sds
-qnorm(0.5 - 95/200)
library(ahead)
library(ahead)
plot(ahead::eatf(USAccDeaths, h=10, level=95))
plot(ahead::eatf(USAccDeaths, h=10, level=95))
plot(ahead::eatf(Nile, h=10, level=95))
plot(ahead::eatf(fdeaths, h=10, level=95))
par(mfrow=c(3, 2))
plot(ahead::eatf(USAccDeaths, h=10, level=95))
plot(ahead::eatf(AirPassengers, h=10, level=95, type_pi = "T"))
plot(ahead::eatf(lynx, h=10, level=95, type_pi = "A"))
plot(ahead::eatf(WWWusage, h=10, level=95, type_pi = "E"))
plot(ahead::eatf(Nile, h=10, level=95))
plot(ahead::eatf(fdeaths, h=10, level=95))
par(mfrow=c(3, 2))
plot(ahead::eatf(USAccDeaths, h=10, level=95))
plot(ahead::eatf(AirPassengers, h=10, level=95))
plot(ahead::eatf(lynx, h=10, level=95))
plot(ahead::eatf(WWWusage, h=10, level=95))
plot(ahead::eatf(Nile, h=10, level=95))
plot(ahead::eatf(fdeaths, h=10, level=95))
print(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5)))
plot(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5)))
plot(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "gaussian"))
plot(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "E"))
plot(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "A"))
plot(ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "T"))
ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "T")
ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "E")
ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "A")
ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "gaussian")
library(ahead)
library(ahead)
ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "gaussian")
res <- ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "gaussian")
res$lower
res$upper
res <- ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "gaussian")
res$lower
res <- ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "gaussian", level = 80)
res$lower
res$upper
res <- ahead::eatf(WWWusage, method = "EAT",
weights = c(0.5, 0, 0.5), type_pi = "gaussian", level = 95)
res$lower
library(ahead)
?forecast::auto.arima
?forecast::thetaf
y <- datasets::EuStockMarkets[ , "DAX"]
log_returns <- ts(log(y[-1]/y[-length(y)]))
require(forecast)
z <- ahead::armagarchf(y=log_returns, h=200)
plot(z)
y <- datasets::EuStockMarkets[ , "DAX"]
log_returns <- ts(log(y[-1]/y[-length(y)]))
require(forecast)
z <- ahead::armagarchf(y=log_returns, h=200)
plot(z)
y <- datasets::EuStockMarkets[ , "DAX"]
log_returns <- ts(log(y[-1]/y[-length(y)]))
require(forecast)
z <- ahead::armagarchf(y=log_returns, h=200)
plot(z)
y <- datasets::EuStockMarkets[ , "CAC"]
log_returns <- ts(log(y[-1]/y[-length(y)]))
require(forecast)
z <- ahead::armagarchf(y=log_returns, h=200)
plot(z)
y <- datasets::EuStockMarkets[ , "FTSE"]
log_returns <- ts(log(y[-1]/y[-length(y)]))
require(forecast)
z <- ahead::armagarchf(y=log_returns, h=200)
plot(z)
library(ahead)
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(AirPassengers, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(lynx, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(WWWusage, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(Nile, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
par(mfrow=c(2, 2))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "linear"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "polynomial"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "radial"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "sigmoid"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 10), predict_func = predict))
pkgdown::build_site()
plot(dynrmf(Nile, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(Nile, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
?ahead::dynrmf
res <- dynrmf(Nile, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict)
summary(res)
?ahead::eatf
obj <- ahead::eatf(WWWusage, method = "EAT",
weights = c(0, 0.5, 0.5), h=10, type_pi="A")
plot(obj)
obj
str(obj)
library(ahead)
?ahead::ridge2f
res <- ahead::ridge2f(fpp::usconsumption, h=10, lags=2)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::insurance, h=10, lags=2)
par(mfrow=c(1, 2))
plot(res, "Quotes")
plot(res, "TV.advert")
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=2)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=1)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=3)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=4)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=2)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=2,
lambda_1=10)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=2,
lambda_2=10)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=2,
lambda_2=1000)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=2,
lambda_2=1)
par(mfrow=c(1, 2))
plot(res, "income")
plot(res, "consumption")
res <- ahead::ridge2f(fpp::insurance, h=10, lags=2)
par(mfrow=c(1, 2))
plot(res, "Quotes")
plot(res, "TV.advert")
res <- varf(fpp::usconsumption, h=20, lags=2)
plot(res, "consumption")
plot(res, "income")
print(varf(fpp::insurance, lags=2, h=10))
res <- varf(fpp::usconsumption, h=20, lags=2)
par(mfrow=c(1, 2))
plot(res, "consumption")
plot(res, "income")
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption), ahead::varf(fpp::usconsumption))
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption), ahead::varf(fpp::usconsumption))
require(fpp)
fit_obj_VAR <- ahead::varf(fpp::insurance, lags = 2,
h = 10, level = 95)
fit_obj_ridge2 <- ahead::ridge2f(fpp::insurance, lags = 2,
h = 10, level = 95, type_pi = "bootstrap")
par(mfrow=c(2, 2))
plot(fit_obj_VAR, "Quotes")
plot(fit_obj_VAR, "TV.advert")
plot(fit_obj_ridge2, "Quotes")
plot(fit_obj_ridge2, "TV.advert")
fit_obj_VAR <- ahead::varf(fpp::insurance, lags = 2,
h = 10, level = 95)
fit_obj_ridge2 <- ahead::ridge2f(fpp::insurance, lags = 2,
h = 10, level = 95)
par(mfrow=c(2, 2))
plot(fit_obj_VAR, "Quotes")
plot(fit_obj_VAR, "TV.advert")
plot(fit_obj_ridge2, "Quotes")
plot(fit_obj_ridge2, "TV.advert")
library(ahead)
library(ahead)
?ahead::ridge2f
library(ahead)
warnings()
?ahead::eatf
library(ahead)
remove.packages("crossvalidation")
y <- datasets::EuStockMarkets[ , "DAX"]
log_returns <- ts(log(y[-1]/y[-length(y)]))
require(forecast)
z <- ahead::armagarchf(y=log_returns, h=200)
plot(z)
source('~/Documents/R_Packages/ahead/R/armagarch.R', echo=TRUE)
y <- datasets::EuStockMarkets[ , "DAX"]
log_returns <- ts(log(y[-1]/y[-length(y)]))
require(forecast)
z <- ahead::armagarchf(y=log_returns, h=200)
plot(z)
y <- datasets::EuStockMarkets[ , "DAX"]
log_returns <- ts(log(y[-1]/y[-length(y)]))
require(forecast)
z <- ahead::armagarchf(y=log_returns, h=200)
plot(z)
str(z)
res <- varf(fpp::usconsumption, h=20, lags=2)
str(z)
str(res)
usethis::use_pkgdown()
pkgdown::build_site()
par(mfrow=c(2, 2))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
# With a Support Vector Machine regressor, an horizon of 20,
# and a 95% prediction interval
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "linear"), predict_func = predict))
plot(dynrmf(Nile, h=20, level=95, fit_func = randomForest::randomForest,
fit_params = list(ntree = 50), predict_func = predict))
plot(dynrmf(Nile, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "linear"), predict_func = predict))
# Forecast using ridge2
# With 2 time series lags, an horizon of 10,
# and a 95% prediction interval
fit_obj_ridge2 <- ahead::ridge2f(fpp::insurance, lags = 2,
h = 10, level = 95)
# Forecast using VAR
fit_obj_VAR <- ahead::varf(fpp::insurance, lags = 2,
h = 10, level = 95)
# Plotting forecasts
# fpp::insurance contains 2 time series, Quotes and TV.advert
par(mfrow=c(2, 2))
plot(fit_obj_ridge2, "Quotes")
plot(fit_obj_VAR, "Quotes")
plot(fit_obj_ridge2, "TV.advert")
plot(fit_obj_VAR, "TV.advert")
install.packages("xgboost")
