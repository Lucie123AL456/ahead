plot(dynrmf(WWWusage, h=20, level=95))
plot(dynrmf(Nile, h=20, level=95))
plot(dynrmf(fdeaths, h=20, level=95))
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95))
plot(dynrmf(AirPassengers, h=20, level=95))
plot(dynrmf(lynx, h=20, level=95))
plot(dynrmf(WWWusage, h=20, level=95))
plot(dynrmf(Nile, h=20, level=95))
plot(dynrmf(fdeaths, h=20, level=95))
set.seed(123)
n <- 100 ; p <- 1
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
set.seed(123)
n <- 100 ; p <- 1
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y, lambda = 0.1)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
fit_obj$coef
fit_obj$GCV
which.min(fit_obj$GCV)
fit_obj$coef[which.min(fit_obj$GCV)]
library(ahead)
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95))
plot(dynrmf(AirPassengers, h=20, level=95))
plot(dynrmf(lynx, h=20, level=95))
plot(dynrmf(WWWusage, h=20, level=95))
plot(dynrmf(Nile, h=20, level=95))
plot(dynrmf(fdeaths, h=20, level=95))
set.seed(123)
n <- 100 ; p <- 1
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
n <- 100 ; p <- 2
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
n <- 100 ; p <- 2
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y, lambda = 0.01)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
fit_obj$coef
fit_obj$lambda
fit_obj$GCV
library(ahead)
n <- 100 ; p <- 2
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y, lambda = 0.01)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
n <- 100 ; p <- 1
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y, lambda = 0.01)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95))
plot(dynrmf(AirPassengers, h=20, level=95))
plot(dynrmf(lynx, h=20, level=95))
plot(dynrmf(WWWusage, h=20, level=95))
plot(dynrmf(Nile, h=20, level=95))
plot(dynrmf(fdeaths, h=20, level=95))
n <- 100 ; p <- 2
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
n <- 100 ; p <- 1
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
n <- 100 ; p <- 2
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y, lambda = 0.1)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
n <- 100 ; p <- 1
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y, lambda = 0.1)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
set.seed(123); n <- 100 ; p <- 2
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y, lambda = 0.1)
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
fit_obj$lambda
fit_obj$best_lam
set.seed(123); n <- 100 ; p <- 2
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y, lambda = c(0.01, 0.1, 0.2))
n_test <- 10
predict(fit_obj, newx=matrix(rnorm(n_test * p), n_test, p))
fit_obj$GCV
fit_obj$best_lam
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
(fit_obj <- ahead::ridge(X, y))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l')
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
(fit_obj <- ahead::ridge(X, y))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l')
plot(fit_obj$GCV, type='l')
plot(log(fit_obj$lambda), fit_obj$GCV, type='l')
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
(fit_obj <- ahead::ridge(X, y))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l')
plot(log(fit_obj$lambda), fit_obj$GCV, type='l')
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
(fit_obj <- ahead::ridge(X, y))
matplot(fit_obj$GCV, t(fit_obj$coef), type = 'l')
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l')
par(mfrow=c(1, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l')
plot(log(fit_obj$lambda), fit_obj$GCV, type='l')
fit_obj$best_lam
log(fit_obj$best_lam)
str(fit_obj)
par(mfrow=c(1, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l')
plot(log(fit_obj$lambda), fit_obj$BIC, type='l')
length(fit_obj$BIC)
which.min(fit_obj$BIC)
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
(fit_obj <- ahead::ridge(X, y))
par(mfrow=c(1, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l')
plot(log(fit_obj$lambda), fit_obj$GCV, type='l')
set.seed(123)
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
(fit_obj <- ahead::ridge(X, y))
par(mfrow=c(1, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l')
plot(log(fit_obj$lambda), fit_obj$GCV, type='l')
dynrmf(USAccDeaths, h=20, level=95, fit_params = list(lambda=0.1))
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95, fit_params = list(lambda=0.01)))
plot(dynrmf(USAccDeaths, h=20, level=95, fit_params = list(lambda=0.1)))
plot(dynrmf(USAccDeaths, h=20, level=95, fit_params = list(lambda=1)))
plot(dynrmf(USAccDeaths, h=20, level=95, fit_params = list(lambda=10)))
plot(dynrmf(USAccDeaths, h=20, level=95, fit_params = list(lambda=100)))
plot(dynrmf(USAccDeaths, h=20, level=95, fit_params = list(lambda=1000)))
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
library(ahead)
pkgdown::build_site()
library(ahead)
pkgdown::build_site()
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95))
plot(dynrmf(AirPassengers, h=20, level=95))
plot(dynrmf(lynx, h=20, level=95))
plot(dynrmf(WWWusage, h=20, level=95))
plot(dynrmf(Nile, h=20, level=95))
plot(dynrmf(fdeaths, h=20, level=95))
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95))
plot(dynrmf(AirPassengers, h=20, level=95))
plot(dynrmf(lynx, h=20, level=95))
plot(dynrmf(diff(WWWusage), h=20, level=95))
plot(dynrmf(Nile, h=20, level=95))
plot(dynrmf(fdeaths, h=20, level=95))
?diff
diff(WWWusage)
WWWusage
par(mfrow=c(3, 2))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95))
plot(ahead::dynrmf(AirPassengers, h=20, level=95))
plot(ahead::dynrmf(lynx, h=20, level=95))
plot(ahead::dynrmf(diff.ts(WWWusage), h=20, level=95))
plot(ahead::dynrmf(Nile, h=20, level=95))
plot(ahead::dynrmf(fdeaths, h=20, level=95))
par(mfrow=c(3, 2))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95))
plot(ahead::dynrmf(AirPassengers, h=20, level=95))
plot(ahead::dynrmf(lynx, h=20, level=95))
plot(ahead::dynrmf(diff(WWWusage), h=20, level=95))
plot(ahead::dynrmf(Nile, h=20, level=95))
plot(ahead::dynrmf(fdeaths, h=20, level=95))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.01)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 10)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 100)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1000)))
par(mfrow=c(2, 2))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 10)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 100)))
par(mfrow=c(2, 2))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 10)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 100)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1000)))
ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1))
ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1))
ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 10))
ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 100))
set.seed(123)
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y)
par(mfrow=c(1, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l')
plot(log(fit_obj$lambda), fit_obj$GCV, type='l')
par(mfrow=c(1, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l', main="coefficients")
plot(log(fit_obj$lambda), fit_obj$GCV, type='l', main="GCV error")
par(mfrow=c(1, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l', main="coefficients \n f(lambda)")
plot(log(fit_obj$lambda), fit_obj$GCV, type='l', main="GCV error")
fit_obj <- ahead::ridge(X, y)
set.seed(123)
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p)
y <- rnorm(n)
fit_obj <- ahead::ridge(X, y)
print(fit_obj$best_lam)
par(mfrow=c(3, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l',
main="coefficients \n f(lambda)")
plot(log(fit_obj$lambda), fit_obj$GCV, type='l',
main="GCV error")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 10)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 100)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1000)))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1)), main="test")
par(mfrow=c(3, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l',
main="coefficients \n f(lambda)"
plot(log(fit_obj$lambda), fit_obj$GCV, type='l',
main="GCV error")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1)), main="lambda = 0.1")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 10)), main="lambda = 10")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 100)), main="lambda = 100")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1000)), main="lambda = 1000")
par(mfrow=c(3, 2))
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l',  main="coefficients \n f(lambda)")
plot(log(fit_obj$lambda), fit_obj$GCV, type='l', main="GCV error")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1)), main="lambda = 0.1")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 10)), main="lambda = 10")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 100)), main="lambda = 100")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1000)), main="lambda = 1000")
par(mfrow=c(3, 2))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95))
plot(ahead::dynrmf(AirPassengers, h=20, level=95))
plot(ahead::dynrmf(lynx, h=20, level=95))
plot(ahead::dynrmf(diff(WWWusage), h=20, level=95))
plot(ahead::dynrmf(Nile, h=20, level=95))
plot(ahead::dynrmf(fdeaths, h=20, level=95))
fit_obj
plot(fpp::ausair)
plot(ahead::dynrmf(fpp::ausair, h=20))
plot(ahead::dynrmf(diff(fpp::ausair), h=20))
plot(datasets::airmiles)
plot(datasets::airquality)
plot(datasets::austres)
plot(datasets::discoveries)
plot(ahead::dynrmf(datasets::discoveries))
plot(ahead::dynrmf(datasets::discoveries, h=10))
plot(ahead::dynrmf(datasets::discoveries, h=20))
library(datasets)
library(ahead)
# Ridge regression demo on tabular data
set.seed(123)
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p)
y <- rnorm(n)
# if a sequence of lambdas is provided (default behavior for ahead::ridge),
# the one minizing Generalized Cross Validation (GCV) error is picked
fit_obj <- ahead::ridge(X, y)
print(fit_obj$best_lam)
par(mfrow=c(3, 2))
# illustrating ahead's implementation of ridge regression
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l',  main="coefficients \n f(lambda)")
plot(log(fit_obj$lambda), fit_obj$GCV, type='l', main="GCV error")
# dynrmf with different values of regularization parameter lambda
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1)), main="lambda = 0.1")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 10)), main="lambda = 10")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 100)), main="lambda = 100")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1000)), main="lambda = 1000")
fit_obj$lambda
par(mfrow=c(3, 2))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95))
plot(ahead::dynrmf(AirPassengers, h=20, level=95))
plot(ahead::dynrmf(lynx, h=20, level=95))
plot(ahead::dynrmf(diff(WWWusage), h=20, level=95))
plot(ahead::dynrmf(Nile, h=20, level=95))
plot(ahead::dynrmf(fdeaths, h=20, level=95))
print(fit_obj$lambda)
print(fit_obj$best_lam)
print(head(ahead::ridge))
print(head(ahead::ridge))
print(fit_obj$best_lam)
print(fit_obj$lambda[which.min(fit_obj$GCV)])
print(head(ahead::dynrmf))
library(bigtime)
bigtime::recursiveforecast(bigtime::sparseVAR(fpp::usconsumption), h = 5)
bigtime::recursiveforecast(bigtime::sparseVAR(fpp::usconsumption, selection = "aic"), h = 5)
bigtime::recursiveforecast(bigtime::sparseVAR(fpp::usconsumption, selection = "aic"), h = 5)$fcst
?bigtime::sparseVAR
bigtime::recursiveforecast(bigtime::sparseVAR(scale(fpp::usconsumption), selection = "aic"), h = 5)$fcst
microbenchmark::microbenchmark(ahead::varf(fpp::usconsumption), ahead::ridge2f(fpp::usconsumption), bigtime::recursiveforecast(bigtime::sparseVAR(scale(fpp::usconsumption), selection = "aic"), h = 5)$fcst)
?bigtime::recursiveforecast
ahead::ridge2f(fpp::usconsumption)
ahead::ridge2f(fpp::insurance)
x <- ts(matrix(rnorm(100000), ncol = 10))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
ggplot2::autoplot(res)
x <- ts(matrix(rnorm(100000), ncol = 100))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
ggplot2::autoplot(res)
x <- ts(matrix(rnorm(100000), ncol = 1000))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
ggplot2::autoplot(res)
?ahead::plot.mtsforecast
?ahead::varf
?ahead::plot
res1 <- ahead::ridge2f(fpp::usconsumption, h=10, lags = 2)
res2 <- ahead::varf(fpp::usconsumption, h=10, lags = 2)
plot(res1, "income")
plot(res2, "income")
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption), ahead::varf(fpp::usconsumption))
microbenchmark::microbenchmark(ahead::varf(fpp::usconsumption), ahead::ridge2f(fpp::usconsumption), bigtime::recursiveforecast(bigtime::sparseVAR(scale(fpp::usconsumption), selection = "aic"), h = 5)$fcst)
vars::VAR
sessionInfo()
profvis::profvis(ahead::ridge2f(fpp::usconsumption))
profvis::profvis(ahead::ridge2f(x))
dim(x)
data(Canada)
library(vars)
data(Canada)
microbenchmark::microbenchmark(ahead::varf(Canada), ahead::ridge2f(Canada), bigtime::recursiveforecast(bigtime::sparseVAR(scale(Canada), selection = "aic"), h = 5)$fcst)
Canada
ahead::ridge2f(Canada)
library(ahead)
profvis::profvis(ahead::ridge2f(x))
ridge2f(x)
library(ahead)
profvis::profvis(ahead::ridge2f(x))
res3 <- ahead::ridge2f(Canada)
library(ahead)
data(Canada)
library(var)
library(vars)
res3 <- ahead::ridge2f(Canada)
data(Canada)
res3 <- ahead::ridge2f(Canada)
res3 <- ahead::ridge2f(fpp::insurance)
res3 <- ahead::ridge2f(Canada)
res3 <- ahead::ridge2f(Canada)
data(Canada)
res3 <- ahead::ridge2f(fpp::insurance)
fpp::insurance
(res3 <- ahead::ridge2f(fpp::insurance))
(res3 <- ahead::ridge2f(fpp::insurance))
(res3 <- ahead::varf(fpp::insurance))
(res4 <- ahead::ridge2f(fpp::insurance))
library(ahead)
(res4 <- ahead::ridge2f(fpp::insurance))
library(ahead)
ahead::ridge2f(fpp::insurance)
ahead::ridge2f(as.matrix(fpp::insurance))
Q
ahead::ridge2f(as.matrix(fpp::insurance))
ahead::ridge2f(as.matrix(fpp::usconsumption))
detach("package:ahead", unload = TRUE)
library(ahead)
ahead::ridge2f(as.matrix(fpp::usconsumption))
library(ahead)
ahead::ridge2f(fpp::insurance)
ahead::ridge2f(fpp::usconsumption)
?solve
ahead::ridge2f(fpp::usconsumption)$mean
ahead::ridge2f(fpp::insurance)$mean
ahead::ridge2f(Canada)$mean
library(vars)
data("Canada")
ahead::ridge2f(Canada)$mean
ahead::varf(Canada)$mean
res1 <- ahead::ridge2f(Canada)
res2 <- ahead::varf(Canada)
plot(res1, "e")
plot(res2, "e")
plot(res1, "prod")
plot(res2, "prod")
plot(res1, "rw")
plot(res2, "rw")
plot(res1, "U")
plot(res2, "U")
microbenchmark::microbenchmark(ahead::ridge2f(Canada), ahead::varf(Canada))
?bigtime::recursiveforecast
bigtime::recursiveforecast(bigtime::sparseVAR(Canada, selection = bic), h=5)
bigtime::recursiveforecast(bigtime::sparseVAR(Canada, selection = "bic"), h=5)
bigtime::recursiveforecast(bigtime::sparseVAR(Canada, selection = "bic"), h=5)$fcst
?bigtime::sparseVAR
dim(EuStockMarkets)
head(EuStockMarkets)
ahead::ridge2f(EuStockMarkets)
ahead::ridge2f(EuStockMarkets)$mean
tail(EuStockMarkets)
res <- ahead::ridge2f(EuStockMarkets)
plot(res, "DAX")
res <- ahead::ridge2f(EuStockMarkets, h = 100, type_pi = "bootstrap")
plot(res, "DAX")
plot(res, "CAC")
plot(res, "FTSE")
res <- ahead::ridge2f(EuStockMarkets, h = 100, type_pi = "bootstrap", lags = 2)
plot(res, "FTSE")
tail(EuStockMarkets)
plot(res, "SMI")
head(ahead::ridge2f)
res$sims
res <- ahead::ridge2f(EuStockMarkets, h = 100, type_pi = "bootstrap", lags = 2)
rets <- log(EuStockMarkets[-1,]/EuStockMarkets[-nrow(EuStockMarkets),])
res <- ahead::ridge2f(rets, h = 100, type_pi = "bootstrap", lags = 2)
plot(res, "SMI")
plot(res, "CAC")
plot(res, "DAX")
plot(res, "FTSE")
res$mean
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
library(PerformanceAnalytics)
apply(res$mean, 2, PerformanceAnalytics::kurtosis)
apply(res$sims[[1]], 2, PerformanceAnalytics::kurtosis)
dim(res$sims[[1]])
apply(res$sims[[2]], 2, PerformanceAnalytics::kurtosis)
apply(res$sims[[3]], 2, PerformanceAnalytics::kurtosis)
apply(res$sims[[4]], 2, PerformanceAnalytics::kurtosis)
matplot(res$sims[[4]], type = 'l')
matplot(res$sims[[1]], type = 'l')
apply(rets, 2, PerformanceAnalytics::kurtosis)
apply(res$sims[[5]], 2, PerformanceAnalytics::kurtosis)
dim(res$sims[[5]])
library(MASS)
k   <- 2000
rho <- .3
S       <- matrix(rep(rho, k*k), nrow=k)
diag(S) <- 1
dat <- mvrnorm(10000, mu=rep(0,k), Sigma=S) ### be patient!
R <- cor(dat)
system.time(RI1 <- solve(R))
system.time(RI2 <- chol2inv(chol(R)))
system.time(RI3 <- qr.solve(R))
microbenchmark::microbenchmark(solve(R), chol2inv(chol(R)), times = 10L)
?chol2inv
dim(R)
head(x)
library(ahead)
x <- ts(matrix(rnorm(100000), ncol = 1000))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), times = 10L))
library(ahead)
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), times = 10L))
library(ahead)
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), times = 10L))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption), ahead::varf(fpp::usconsumption), times = 100L))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption), ahead::varf(fpp::usconsumption), times = 100L))
profvis::profvis(ahead::ridge2f(x))
res <- ahead::ridge2f(rets, h = 100, type_pi = "bootstrap", lags = 2)
apply(res$sims[[5]], 2, PerformanceAnalytics::kurtosis)
plot(res, "DAX")
plot(res, "CAC")
plot(EuStockMarkets[,1])
x <- ts(matrix(rnorm(100000), ncol = 10))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
x <- ts(matrix(rnorm(100000), ncol = 10))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
?ar
x <- ts(matrix(rnorm(10000), ncol = 100))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
x <- ts(matrix(rnorm(100000), ncol = 100))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
