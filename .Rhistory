(res <- microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption), ahead::varf(fpp::usconsumption), times = 100L))
profvis::profvis(ahead::ridge2f(x))
res <- ahead::ridge2f(rets, h = 100, type_pi = "bootstrap", lags = 2)
apply(res$sims[[5]], 2, PerformanceAnalytics::kurtosis)
plot(res, "DAX")
plot(res, "CAC")
plot(EuStockMarkets[,1])
x <- ts(matrix(rnorm(100000), ncol = 10))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
x <- ts(matrix(rnorm(100000), ncol = 10))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
?ar
x <- ts(matrix(rnorm(10000), ncol = 100))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
x <- ts(matrix(rnorm(100000), ncol = 100))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=2,
lambda_2=1)
res$fitted_values
matplot(res$fitted_values, type='l')
library(ahead)
pkgdown::build_site()
barplot(rnorm(10), border = FALSE)
barplot(rnorm(10), border = FALSE)
barplot(rnorm(10), border = FALSE)
?barplot(rnorm(10), border = FALSE)
library(ahead)
library(ahead)
res <- ahead::ridge2f(fpp::insurance, h=10, lags=2)
res$residuals + res$fitted_values
head(fpp::insurance)
tail(fpp::insurance)
dim(fpp::insurance)
tail(fpp::insurance)
res <- ahead::ridge2f(fpp::insurance, h=10, lags=1)
head(res$residuals + res$fitted_values)
head(fpp::insurance)
head(fpp::insurance)
res$fitted_values
res$residuals
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
pkgdown::build_site()
pkgdown::build_site()
10^2.5
10^2
10^(2.5)
10^(3.5)
10^(3)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000), ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, cl=4), times = 10L)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000), ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, cl=8L), times = 10L)
X <- ts(matrix(rnorm(10000), nrow = 100))
dim(X)
microbenchmark::microbenchmark(ahead::ridge2f(X, h=20, type_pi = "bootstrap", B=10000), ahead::ridge2f(X, h=20, type_pi = "bootstrap", B=10000, cl=8L), times = 10L)
profvis::profvis(ahead::ridge2f(X, h=20, type_pi = "bootstrap", B=10000)
)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, type_forecast = "direct"), ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, cl=8L, type_forecast = "direct"), times = 10L)
```
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, type_forecast = "direct"))
?dplyr::bind_rows()
dplyr::bind_rows
dplyr::bind_rows(rnorm(10), rnorm(10))
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, type_forecast = "recursive"))
profvis::profvis(ahead::ridge2f(X, h=20, type_pi = "bootstrap", B=10000, type_forecast = "recursive"))
set.seed(123)
a <- matrix(rnorm(10), ncol=2)
a
a[1, ] <- NA
a
a[2, ] <- NA
a
a[which(!is.na(a))]
a[which(!is.na(a)),]
is.na(a)
!is.na(a)
a[!is.na(a)]
a[!is.na(a),]
a(!is.na(a))
a
a[!is.na(a),]
a
na.omit(a)
?na.omit
as.matrix(na.omit(a))
a
na.omit(a)
complete.cases(a)
a[complete.cases(a), ]
a[!is.na(a[,1]), ]
microbenchmark::microbenchmark(na.omit(a),
a[complete.cases(a), ],
a[!is.na(a[,1]), ])
microbenchmark::microbenchmark(na.omit(a),
a[complete.cases(a), ],
a[!is.na(a[,1]), ])
microbenchmark::microbenchmark(na.omit(a),
a[complete.cases(a), ],
a[!is.na(a[,1]), ])
microbenchmark::microbenchmark(na.omit(a),
a[complete.cases(a), ],
a[!is.na(a[,1]), ])
?complete.cases
a
a[complete.cases(a), ]
complete.cases(a)
h <- 2
a[1:h, ] <- NA
a
a
a <- matrix(rnorm(10), ncol=2)
h <- 2
a[1:h, ] <- NA
a
a
a[nrow(a) - h +1, ]
a[nrow(a) - h, ]
a[nrow(a) - h-1, ]
a
a[nrow(a) - h -2, ]
a[nrow(a) - h, ]
set.seed(123)
y_mat <- matrix(rnorm(10), ncol=2)
(y_mat <- matrix(rnorm(10), ncol=2))
h <- 2
y_mat[1:h, ] <- NA
(y_mat[1:h, ] <- NA)
y_mat
set.seed(123)
(y_mat <- matrix(rnorm(10), ncol=2))
h <- 2
y_mat[1:h, ] <- NA
y_mat
y_mat[nrow(y_mat) - h, ]
y_mat[nrow(y_mat) - h-1, ]
y_mat[nrow(y_mat) - h-2, ]
y_mat[nrow(y_mat) - h-3, ]
microbenchmark::microbenchmark(na.omit(y_mat),
y_mat[complete.cases(y_mat), ],
y_mat[!is.na(y_mat[,1]), ])
microbenchmark::microbenchmark(na.omit(y_mat),
y_mat[complete.cases(y_mat), ],
y_mat[!is.na(y_mat[,1]), ])
library(ahead)
library(ahead)
ahead::ridge2f(fpp::insurance)
library(ahead)
ahead::ridge2f(fpp::insurance)
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
library(ahead)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
profvis::profvis(ahead::ridge2f(fpp::insurance, h=20)$mean)
profvis::profvis(ahead::ridge2f(fpp::insurance, h=20, type_pi = "bootstrap", B=10000)$mean)
library(ahead)
profvis::profvis(ahead::ridge2f(fpp::insurance, h=20, type_pi = "bootstrap", B=10000)$mean)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20)$mean)
library(ahead)
ahead::ridge2f(fpp::insurance)$mean)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
library(ahead)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000cl=4)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000, cl=4)$mean)
library(ahead)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean, times=10L)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean)
set.seed(123)
x <- ts(matrix(rnorm(100), ncol = 5))
res1 <- ahead::ridge2f(x)
res1
res1$mean
res1 <- ahead::ridge2f(x)$mean
res2 <- ahead::ridge2f(x, type_pi = "bootstrap")$mean
res1
res2
res1 <- ahead::ridge2f(x)
res2 <- ahead::ridge2f(x, type_pi = "bootstrap", B=5)
res1$mean
res2$mean
res1$mean[1, 1]
round(res1$mean[1, 1], 2)
round(res2$mean[1, 1], 2)
round(res1$lower[1, 1], 2)
res2$lower[1, 1]
set.seed(123)
x <- ts(matrix(rnorm(100), ncol = 5))
res1 <- ahead::ridge2f(x)
res2 <- ahead::ridge2f(x, type_pi = "bootstrap", B=5)
round(res1$mean[1, 1], 2)
round(res2$mean[1, 1], 2)
round(res1$lower[1, 1], 2)
round(res2$lower[1, 1], 2)
drop(round(res2$lower[1, 1], 2))
as.numeric(round(res2$lower[1, 1], 2))
devtools::test()
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean, times=10L)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20, type_pi = "bootstrap", B = 10000)$mean, times=10L)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean)
devtools::test()
library(ahead)
devtools::test()
x
ahead::ridge2f(x)
microbenchmark::microbenchmark(ahead::ridge2f(x))
library(ahead)
devtools::test()
library(ahead)
devtools::test()
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean, times=10L)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000))
devtools::test()
library(ahead)
devtools::test()
ahead::ridge2f(fpp::usconsumption)
ahead::ridge2f(fpp::usconsumption)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption)$mean)
profvis::profvis(ahead::ridge2f(fpp::usconsumption)$mean)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000))
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000, cl=4L))
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000, cl=4L), ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000), times = 50L)
x
microbenchmark::microbenchmark(ahead::ridge2f(x, h=20, type_pi = "bootstrap", B = 10000, cl=4L), ahead::ridge2f(x, h=20, type_pi = "bootstrap", B = 10000), times = 10L)
all.equal(ahead::ridge2f(x, h=20, type_pi = "bootstrap", B = 10000, cl=4L), ahead::ridge2f(x, h=20, type_pi = "bootstrap", B = 10000))
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
devtools::test()
set.seed(123)
x <- ts(matrix(rnorm(100), ncol = 5))
res1 <- ahead::ridge2f(x)
res2 <- ahead::ridge2f(x, type_pi = "bootstrap", B=5)
res1$mean[1, 1]
res2$mean[1, 1]
res2$lower[1, 1]
res1$lower[1, 1]
library(ahead)
set.seed(123)
x <- ts(matrix(rnorm(100), ncol = 5))
res1 <- ahead::ridge2f(x)
res2 <- ahead::ridge2f(x, type_pi = "bootstrap", B=5)
res1$mean[1, 1]
res2$mean[1, 1]
res1$lower[1, 1]
res2$lower[1, 1]
devtools::test()
pkgdown::build_site()
EuStockMarkets
res <- ahead::ridge2f(EuStockMarkets, h=100, type_pi = "bootstrap", B=500)
?plot.mts
?ahead::ridge2f
plot(res, "DAX")
plot(res, "CAC")
plot(res, "SMI")
plot(res, "FTSE")
dim(EuStockMarkets)
par(mfrow=c(2, 2))
plot(res, "CAC")
plot(res, "FTSE")
plot(res, "SMI")
plot(res, "DAX")
res <- ahead::ridge2f(EuStockMarkets, h=100, type_pi = "bootstrap", B=1000)
par(mfrow=c(2, 2))
plot(res, "SMI")
plot(res, "DAX")
plot(res, "FTSE")
plot(res, "CAC")
res <- ahead::ridge2f(fpp::usconsumption, type_pi = "bootstrap", h=10, B=1000)
plot(res, "consumption")
plot(res, "income")
?lm.fit
n <- 7 ; p <- 2
X <- matrix(rnorm(n * p), n, p) # no intercept!
colSums(X)
X
colMeans(X)
apply(X, 2, median)
X[nrow(X),]
X
x <- apply(X, 2, median)
x
replicate(5, x)
t(replicate(5, x))
?replicate
library(ahead)
?switch
require(stats)
centre <- function(x, type) {
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
x <- rcauchy(10)
centre(x, "mean")
centre(x, mean)
sqrt(17.830657894736845)
forecast::meanf
?forecast::meanf
nile.fcast <- forecast::meanf(Nile, h=10, bootstrap=TRUE, npaths=100)
nile.fcast
nile.fcast$model$bootstrap
plot(nile.fcast)
forecast::meanf
?sweep
ggplot2::economics
forecast::meanf
level <- 95
1 - (1 - level / 100) / 2
(1 - level / 100) / 2
paste0("basic(", method, ")"
paste0("basic(", method, ")")
paste0("basic(", "mean", ")")
vector("list", length = 3)
sample.int(n = 10, size = 5, replace = TRUE)
sample.int(n = 10, size = 5, replace = TRUE)
sample.int(n = 10, size = 5, replace = TRUE)
library(ahead)
ahead::basicf(fpp::usconsumption)$mean
ahead::basicf(fpp::usconsumption)$lower
ahead::basicf(fpp::usconsumption)$upper
res <- ahead::basicf(fpp::usconsumption)
plot(res, "income")
plot(res, "consumption")
res <- ahead::basicf(fpp::usconsumption, h=10, B=1000)
plot(res, "consumption")
plot(res, "income")
res <- ahead::basicf(fpp::usconsumption, h=10, B=1000, method = "median")
plot(res, "consumption")
plot(res, "income")
res$sims[[1]]
length(res$sims)
res$sims[[2]]
head(fpp::usconsumption)
plot(ahead::meanf(fpp::usconsumption[,2], h=10))
plot(forecast::meanf(fpp::usconsumption[,2], h=10))
forecast::meanf(fpp::usconsumption[,2], h=10)
ahead::basicf(fpp::usconsumption, h=10)
ahead::basicf(fpp::usconsumption, h=10)$mean
library(ahead)
ahead::basicf(fpp::usconsumption, h=10)$mean
forecast::meanf(fpp::usconsumption[,2], h=10)
ahead::basicf(fpp::usconsumption, h=10)$lower
res <- ahead::basicf(fpp::usconsumption, h=10, B=1000)
plot(res, "income")
res <- ahead::basicf(fpp::usconsumption, h=10, B=500)
plot(res, "income")
res <- ahead::basicf(fpp::usconsumption, h=10, B=500, method = "median")
plot(res, "income")
res <- ahead::basicf(fpp::usconsumption, h=10, B=500, method = "rw")
plot(res, "income")
mat <- matrix(rnorm(280*100), nrow = 280, ncol = 100)
microbenchmark::microbenchmark(ahead::basicf(mat))
microbenchmark::microbenchmark(ahead::basicf(mat, B=250))
microbenchmark::microbenchmark(ahead::basicf(mat, B=500))
library(ahead)
res <- ahead::basicf(fpp::usconsumption, h=10, B=500, method = "rw")
plot(res, "income")
res <- ahead::basicf(fpp::usconsumption, h=10, B=250, method = "rw")
plot(res, "income")
res <- ahead::basicf(fpp::usconsumption, h=10, B=1000, method = "rw")
plot(res, "income")
library(ahead)
res <- ahead::basicf(fpp::insurance)
library(ahead)
res <- ahead::basicf(fpp::insurance)
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::usconsumption)
plot(res, "income")
plot(res, "cons")
plot(res, "consumption")
res <- ahead::basicf(fpp::usconsumption, type_pi = "boot")
plot(res, "consumption")
res <- ahead::basicf(fpp::usconsumption, type_pi = "boot", B=250)
plot(res, "consumption")
res <- ahead::basicf(fpp::usconsumption, type_pi = "boot", B=500)
plot(res, "consumption")
res <- ahead::basicf(ggplot2::economics[,2:6], type_pi = "boot", B=100)
res$mean
plot(res, "pce")
plot(res, "psavert")
plot(res, "uempmed")
plot(res, "unemploy")
91/90-1
85/91-1
res <- ahead::basicf(fpp::insurance)
plot(res, "insurance")
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance)
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, method="rw")
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance)
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, type_pi = "bootstrap")
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, type_pi = "bootstrap", method = "rw")
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
library(ahead)
res <- ahead::basicf(fpp::insurance, h=10)
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, method="rw", h=10)
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, method="rw", h=10, type_pi = "bootstrap")
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, method="median", h=10, type_pi = "bootstrap")
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, method="rw", h=10, type_pi = "bootstrap", B=1000)
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
?replicate
library(ahead)
res <- ahead::basicf(fpp::insurance, h=10)
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, method="rw", h=10)
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, method="mean", h=10)
par(mfrow=c(1, 2))
plot(res, "TV.advert")
plot(res, "Quotes")
r optimize
optimize
?optimize
?nlminb
reticulate::repl_python()
pkgdown::build_site()
res$sims
res <- ahead::basicf(fpp::insurance, type_pi = "boostrap", B=5)
res <- ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=5)
res$sims
res$mean
reticulate::repl_python()
bayesianoptimization::msnlminb
bayesianoptimization::random_search_opt
18*3
18*4
# https://dzone.com/articles/extend-python-datetime-workday
def workdayadd(start_date,work_days, whichdays=(MON,TUE,WED,THU,FRI)):
'''
Adds to a given date a number of working days
2009/12/04 for example is a friday - adding one weekday
will return 2209/12/07
>>> workdayadd(date(year=2009,month=12,day=4),1)
datetime.date(2009, 12, 7)
'''
weeks, days = divmod(work_days,len(whichdays))
new_date = start_date + timedelta(weeks=weeks)
for i in range(days):
while new_date.weekday() not in whichdays:
new_date += timedelta(days=1)
return new_date
reticulate::repl_python()
