plot(ahead::dynrmf(Nile, h=20, level=95))
plot(ahead::dynrmf(fdeaths, h=20, level=95))
fit_obj
plot(fpp::ausair)
plot(ahead::dynrmf(fpp::ausair, h=20))
plot(ahead::dynrmf(diff(fpp::ausair), h=20))
plot(datasets::airmiles)
plot(datasets::airquality)
plot(datasets::austres)
plot(datasets::discoveries)
plot(ahead::dynrmf(datasets::discoveries))
plot(ahead::dynrmf(datasets::discoveries, h=10))
plot(ahead::dynrmf(datasets::discoveries, h=20))
library(datasets)
library(ahead)
# Ridge regression demo on tabular data
set.seed(123)
n <- 100 ; p <- 10
X <- matrix(rnorm(n * p), n, p)
y <- rnorm(n)
# if a sequence of lambdas is provided (default behavior for ahead::ridge),
# the one minizing Generalized Cross Validation (GCV) error is picked
fit_obj <- ahead::ridge(X, y)
print(fit_obj$best_lam)
par(mfrow=c(3, 2))
# illustrating ahead's implementation of ridge regression
matplot(log(fit_obj$lambda), t(fit_obj$coef), type = 'l',  main="coefficients \n f(lambda)")
plot(log(fit_obj$lambda), fit_obj$GCV, type='l', main="GCV error")
# dynrmf with different values of regularization parameter lambda
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 0.1)), main="lambda = 0.1")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 10)), main="lambda = 10")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 100)), main="lambda = 100")
plot(ahead::dynrmf(USAccDeaths, h=20, level=95, fit_params=list(lambda = 1000)), main="lambda = 1000")
fit_obj$lambda
par(mfrow=c(3, 2))
plot(ahead::dynrmf(USAccDeaths, h=20, level=95))
plot(ahead::dynrmf(AirPassengers, h=20, level=95))
plot(ahead::dynrmf(lynx, h=20, level=95))
plot(ahead::dynrmf(diff(WWWusage), h=20, level=95))
plot(ahead::dynrmf(Nile, h=20, level=95))
plot(ahead::dynrmf(fdeaths, h=20, level=95))
print(fit_obj$lambda)
print(fit_obj$best_lam)
print(head(ahead::ridge))
print(head(ahead::ridge))
print(fit_obj$best_lam)
print(fit_obj$lambda[which.min(fit_obj$GCV)])
print(head(ahead::dynrmf))
library(bigtime)
bigtime::recursiveforecast(bigtime::sparseVAR(fpp::usconsumption), h = 5)
bigtime::recursiveforecast(bigtime::sparseVAR(fpp::usconsumption, selection = "aic"), h = 5)
bigtime::recursiveforecast(bigtime::sparseVAR(fpp::usconsumption, selection = "aic"), h = 5)$fcst
?bigtime::sparseVAR
bigtime::recursiveforecast(bigtime::sparseVAR(scale(fpp::usconsumption), selection = "aic"), h = 5)$fcst
microbenchmark::microbenchmark(ahead::varf(fpp::usconsumption), ahead::ridge2f(fpp::usconsumption), bigtime::recursiveforecast(bigtime::sparseVAR(scale(fpp::usconsumption), selection = "aic"), h = 5)$fcst)
?bigtime::recursiveforecast
ahead::ridge2f(fpp::usconsumption)
ahead::ridge2f(fpp::insurance)
x <- ts(matrix(rnorm(100000), ncol = 10))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
ggplot2::autoplot(res)
x <- ts(matrix(rnorm(100000), ncol = 100))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
ggplot2::autoplot(res)
x <- ts(matrix(rnorm(100000), ncol = 1000))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
ggplot2::autoplot(res)
?ahead::plot.mtsforecast
?ahead::varf
?ahead::plot
res1 <- ahead::ridge2f(fpp::usconsumption, h=10, lags = 2)
res2 <- ahead::varf(fpp::usconsumption, h=10, lags = 2)
plot(res1, "income")
plot(res2, "income")
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption), ahead::varf(fpp::usconsumption))
microbenchmark::microbenchmark(ahead::varf(fpp::usconsumption), ahead::ridge2f(fpp::usconsumption), bigtime::recursiveforecast(bigtime::sparseVAR(scale(fpp::usconsumption), selection = "aic"), h = 5)$fcst)
vars::VAR
sessionInfo()
profvis::profvis(ahead::ridge2f(fpp::usconsumption))
profvis::profvis(ahead::ridge2f(x))
dim(x)
data(Canada)
library(vars)
data(Canada)
microbenchmark::microbenchmark(ahead::varf(Canada), ahead::ridge2f(Canada), bigtime::recursiveforecast(bigtime::sparseVAR(scale(Canada), selection = "aic"), h = 5)$fcst)
Canada
ahead::ridge2f(Canada)
library(ahead)
profvis::profvis(ahead::ridge2f(x))
ridge2f(x)
library(ahead)
profvis::profvis(ahead::ridge2f(x))
res3 <- ahead::ridge2f(Canada)
library(ahead)
data(Canada)
library(var)
library(vars)
res3 <- ahead::ridge2f(Canada)
data(Canada)
res3 <- ahead::ridge2f(Canada)
res3 <- ahead::ridge2f(fpp::insurance)
res3 <- ahead::ridge2f(Canada)
res3 <- ahead::ridge2f(Canada)
data(Canada)
res3 <- ahead::ridge2f(fpp::insurance)
fpp::insurance
(res3 <- ahead::ridge2f(fpp::insurance))
(res3 <- ahead::ridge2f(fpp::insurance))
(res3 <- ahead::varf(fpp::insurance))
(res4 <- ahead::ridge2f(fpp::insurance))
library(ahead)
(res4 <- ahead::ridge2f(fpp::insurance))
library(ahead)
ahead::ridge2f(fpp::insurance)
ahead::ridge2f(as.matrix(fpp::insurance))
Q
ahead::ridge2f(as.matrix(fpp::insurance))
ahead::ridge2f(as.matrix(fpp::usconsumption))
detach("package:ahead", unload = TRUE)
library(ahead)
ahead::ridge2f(as.matrix(fpp::usconsumption))
library(ahead)
ahead::ridge2f(fpp::insurance)
ahead::ridge2f(fpp::usconsumption)
?solve
ahead::ridge2f(fpp::usconsumption)$mean
ahead::ridge2f(fpp::insurance)$mean
ahead::ridge2f(Canada)$mean
library(vars)
data("Canada")
ahead::ridge2f(Canada)$mean
ahead::varf(Canada)$mean
res1 <- ahead::ridge2f(Canada)
res2 <- ahead::varf(Canada)
plot(res1, "e")
plot(res2, "e")
plot(res1, "prod")
plot(res2, "prod")
plot(res1, "rw")
plot(res2, "rw")
plot(res1, "U")
plot(res2, "U")
microbenchmark::microbenchmark(ahead::ridge2f(Canada), ahead::varf(Canada))
?bigtime::recursiveforecast
bigtime::recursiveforecast(bigtime::sparseVAR(Canada, selection = bic), h=5)
bigtime::recursiveforecast(bigtime::sparseVAR(Canada, selection = "bic"), h=5)
bigtime::recursiveforecast(bigtime::sparseVAR(Canada, selection = "bic"), h=5)$fcst
?bigtime::sparseVAR
dim(EuStockMarkets)
head(EuStockMarkets)
ahead::ridge2f(EuStockMarkets)
ahead::ridge2f(EuStockMarkets)$mean
tail(EuStockMarkets)
res <- ahead::ridge2f(EuStockMarkets)
plot(res, "DAX")
res <- ahead::ridge2f(EuStockMarkets, h = 100, type_pi = "bootstrap")
plot(res, "DAX")
plot(res, "CAC")
plot(res, "FTSE")
res <- ahead::ridge2f(EuStockMarkets, h = 100, type_pi = "bootstrap", lags = 2)
plot(res, "FTSE")
tail(EuStockMarkets)
plot(res, "SMI")
head(ahead::ridge2f)
res$sims
res <- ahead::ridge2f(EuStockMarkets, h = 100, type_pi = "bootstrap", lags = 2)
rets <- log(EuStockMarkets[-1,]/EuStockMarkets[-nrow(EuStockMarkets),])
res <- ahead::ridge2f(rets, h = 100, type_pi = "bootstrap", lags = 2)
plot(res, "SMI")
plot(res, "CAC")
plot(res, "DAX")
plot(res, "FTSE")
res$mean
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
library(PerformanceAnalytics)
apply(res$mean, 2, PerformanceAnalytics::kurtosis)
apply(res$sims[[1]], 2, PerformanceAnalytics::kurtosis)
dim(res$sims[[1]])
apply(res$sims[[2]], 2, PerformanceAnalytics::kurtosis)
apply(res$sims[[3]], 2, PerformanceAnalytics::kurtosis)
apply(res$sims[[4]], 2, PerformanceAnalytics::kurtosis)
matplot(res$sims[[4]], type = 'l')
matplot(res$sims[[1]], type = 'l')
apply(rets, 2, PerformanceAnalytics::kurtosis)
apply(res$sims[[5]], 2, PerformanceAnalytics::kurtosis)
dim(res$sims[[5]])
library(MASS)
k   <- 2000
rho <- .3
S       <- matrix(rep(rho, k*k), nrow=k)
diag(S) <- 1
dat <- mvrnorm(10000, mu=rep(0,k), Sigma=S) ### be patient!
R <- cor(dat)
system.time(RI1 <- solve(R))
system.time(RI2 <- chol2inv(chol(R)))
system.time(RI3 <- qr.solve(R))
microbenchmark::microbenchmark(solve(R), chol2inv(chol(R)), times = 10L)
?chol2inv
dim(R)
head(x)
library(ahead)
x <- ts(matrix(rnorm(100000), ncol = 1000))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), times = 10L))
library(ahead)
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), times = 10L))
library(ahead)
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), times = 10L))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption), ahead::varf(fpp::usconsumption), times = 100L))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption), ahead::varf(fpp::usconsumption), times = 100L))
profvis::profvis(ahead::ridge2f(x))
res <- ahead::ridge2f(rets, h = 100, type_pi = "bootstrap", lags = 2)
apply(res$sims[[5]], 2, PerformanceAnalytics::kurtosis)
plot(res, "DAX")
plot(res, "CAC")
plot(EuStockMarkets[,1])
x <- ts(matrix(rnorm(100000), ncol = 10))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
x <- ts(matrix(rnorm(100000), ncol = 10))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
?ar
x <- ts(matrix(rnorm(10000), ncol = 100))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
x <- ts(matrix(rnorm(100000), ncol = 100))
(res <- microbenchmark::microbenchmark(ahead::ridge2f(x), ahead::varf(x), times = 10L))
res <- ahead::ridge2f(fpp::usconsumption, h=20, lags=2,
lambda_2=1)
res$fitted_values
matplot(res$fitted_values, type='l')
library(ahead)
pkgdown::build_site()
barplot(rnorm(10), border = FALSE)
barplot(rnorm(10), border = FALSE)
barplot(rnorm(10), border = FALSE)
?barplot(rnorm(10), border = FALSE)
library(ahead)
library(ahead)
res <- ahead::ridge2f(fpp::insurance, h=10, lags=2)
res$residuals + res$fitted_values
head(fpp::insurance)
tail(fpp::insurance)
dim(fpp::insurance)
tail(fpp::insurance)
res <- ahead::ridge2f(fpp::insurance, h=10, lags=1)
head(res$residuals + res$fitted_values)
head(fpp::insurance)
head(fpp::insurance)
res$fitted_values
res$residuals
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
library(ahead)
pkgdown::build_site()
pkgdown::build_site()
10^2.5
10^2
10^(2.5)
10^(3.5)
10^(3)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000), ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, cl=4), times = 10L)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000), ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, cl=8L), times = 10L)
X <- ts(matrix(rnorm(10000), nrow = 100))
dim(X)
microbenchmark::microbenchmark(ahead::ridge2f(X, h=20, type_pi = "bootstrap", B=10000), ahead::ridge2f(X, h=20, type_pi = "bootstrap", B=10000, cl=8L), times = 10L)
profvis::profvis(ahead::ridge2f(X, h=20, type_pi = "bootstrap", B=10000)
)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, type_forecast = "direct"), ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, cl=8L, type_forecast = "direct"), times = 10L)
```
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, type_forecast = "direct"))
?dplyr::bind_rows()
dplyr::bind_rows
dplyr::bind_rows(rnorm(10), rnorm(10))
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B=10000, type_forecast = "recursive"))
profvis::profvis(ahead::ridge2f(X, h=20, type_pi = "bootstrap", B=10000, type_forecast = "recursive"))
set.seed(123)
a <- matrix(rnorm(10), ncol=2)
a
a[1, ] <- NA
a
a[2, ] <- NA
a
a[which(!is.na(a))]
a[which(!is.na(a)),]
is.na(a)
!is.na(a)
a[!is.na(a)]
a[!is.na(a),]
a(!is.na(a))
a
a[!is.na(a),]
a
na.omit(a)
?na.omit
as.matrix(na.omit(a))
a
na.omit(a)
complete.cases(a)
a[complete.cases(a), ]
a[!is.na(a[,1]), ]
microbenchmark::microbenchmark(na.omit(a),
a[complete.cases(a), ],
a[!is.na(a[,1]), ])
microbenchmark::microbenchmark(na.omit(a),
a[complete.cases(a), ],
a[!is.na(a[,1]), ])
microbenchmark::microbenchmark(na.omit(a),
a[complete.cases(a), ],
a[!is.na(a[,1]), ])
microbenchmark::microbenchmark(na.omit(a),
a[complete.cases(a), ],
a[!is.na(a[,1]), ])
?complete.cases
a
a[complete.cases(a), ]
complete.cases(a)
h <- 2
a[1:h, ] <- NA
a
a
a <- matrix(rnorm(10), ncol=2)
h <- 2
a[1:h, ] <- NA
a
a
a[nrow(a) - h +1, ]
a[nrow(a) - h, ]
a[nrow(a) - h-1, ]
a
a[nrow(a) - h -2, ]
a[nrow(a) - h, ]
set.seed(123)
y_mat <- matrix(rnorm(10), ncol=2)
(y_mat <- matrix(rnorm(10), ncol=2))
h <- 2
y_mat[1:h, ] <- NA
(y_mat[1:h, ] <- NA)
y_mat
set.seed(123)
(y_mat <- matrix(rnorm(10), ncol=2))
h <- 2
y_mat[1:h, ] <- NA
y_mat
y_mat[nrow(y_mat) - h, ]
y_mat[nrow(y_mat) - h-1, ]
y_mat[nrow(y_mat) - h-2, ]
y_mat[nrow(y_mat) - h-3, ]
microbenchmark::microbenchmark(na.omit(y_mat),
y_mat[complete.cases(y_mat), ],
y_mat[!is.na(y_mat[,1]), ])
microbenchmark::microbenchmark(na.omit(y_mat),
y_mat[complete.cases(y_mat), ],
y_mat[!is.na(y_mat[,1]), ])
library(ahead)
library(ahead)
ahead::ridge2f(fpp::insurance)
library(ahead)
ahead::ridge2f(fpp::insurance)
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
library(ahead)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
profvis::profvis(ahead::ridge2f(fpp::insurance, h=20)$mean)
profvis::profvis(ahead::ridge2f(fpp::insurance, h=20, type_pi = "bootstrap", B=10000)$mean)
library(ahead)
profvis::profvis(ahead::ridge2f(fpp::insurance, h=20, type_pi = "bootstrap", B=10000)$mean)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20)$mean)
library(ahead)
ahead::ridge2f(fpp::insurance)$mean)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
library(ahead)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000cl=4)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000, cl=4)$mean)
library(ahead)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean, times=10L)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean)
set.seed(123)
x <- ts(matrix(rnorm(100), ncol = 5))
res1 <- ahead::ridge2f(x)
res1
res1$mean
res1 <- ahead::ridge2f(x)$mean
res2 <- ahead::ridge2f(x, type_pi = "bootstrap")$mean
res1
res2
res1 <- ahead::ridge2f(x)
res2 <- ahead::ridge2f(x, type_pi = "bootstrap", B=5)
res1$mean
res2$mean
res1$mean[1, 1]
round(res1$mean[1, 1], 2)
round(res2$mean[1, 1], 2)
round(res1$lower[1, 1], 2)
res2$lower[1, 1]
set.seed(123)
x <- ts(matrix(rnorm(100), ncol = 5))
res1 <- ahead::ridge2f(x)
res2 <- ahead::ridge2f(x, type_pi = "bootstrap", B=5)
round(res1$mean[1, 1], 2)
round(res2$mean[1, 1], 2)
round(res1$lower[1, 1], 2)
round(res2$lower[1, 1], 2)
drop(round(res2$lower[1, 1], 2))
as.numeric(round(res2$lower[1, 1], 2))
devtools::test()
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean, times=10L)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance, h=20, type_pi = "bootstrap", B = 10000)$mean, times=10L)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean)
devtools::test()
library(ahead)
devtools::test()
x
ahead::ridge2f(x)
microbenchmark::microbenchmark(ahead::ridge2f(x))
library(ahead)
devtools::test()
library(ahead)
devtools::test()
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000)$mean, times=10L)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000))
devtools::test()
library(ahead)
devtools::test()
ahead::ridge2f(fpp::usconsumption)
ahead::ridge2f(fpp::usconsumption)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption)$mean)
profvis::profvis(ahead::ridge2f(fpp::usconsumption)$mean)
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000))
profvis::profvis(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000, cl=4L))
microbenchmark::microbenchmark(ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000, cl=4L), ahead::ridge2f(fpp::usconsumption, h=20, type_pi = "bootstrap", B = 10000), times = 50L)
x
microbenchmark::microbenchmark(ahead::ridge2f(x, h=20, type_pi = "bootstrap", B = 10000, cl=4L), ahead::ridge2f(x, h=20, type_pi = "bootstrap", B = 10000), times = 10L)
all.equal(ahead::ridge2f(x, h=20, type_pi = "bootstrap", B = 10000, cl=4L), ahead::ridge2f(x, h=20, type_pi = "bootstrap", B = 10000))
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
ahead::ridge2f(fpp::insurance)$mean
library(ahead)
ahead::ridge2f(fpp::insurance)$mean
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
microbenchmark::microbenchmark(ahead::ridge2f(fpp::insurance)$mean)
devtools::test()
set.seed(123)
x <- ts(matrix(rnorm(100), ncol = 5))
res1 <- ahead::ridge2f(x)
res2 <- ahead::ridge2f(x, type_pi = "bootstrap", B=5)
res1$mean[1, 1]
res2$mean[1, 1]
res2$lower[1, 1]
res1$lower[1, 1]
library(ahead)
set.seed(123)
x <- ts(matrix(rnorm(100), ncol = 5))
res1 <- ahead::ridge2f(x)
res2 <- ahead::ridge2f(x, type_pi = "bootstrap", B=5)
res1$mean[1, 1]
res2$mean[1, 1]
res1$lower[1, 1]
res2$lower[1, 1]
devtools::test()
pkgdown::build_site()
EuStockMarkets
res <- ahead::ridge2f(EuStockMarkets, h=100, type_pi = "bootstrap", B=500)
?plot.mts
?ahead::ridge2f
plot(res, "DAX")
plot(res, "CAC")
plot(res, "SMI")
plot(res, "FTSE")
dim(EuStockMarkets)
par(mfrow=c(2, 2))
plot(res, "CAC")
plot(res, "FTSE")
plot(res, "SMI")
plot(res, "DAX")
res <- ahead::ridge2f(EuStockMarkets, h=100, type_pi = "bootstrap", B=1000)
par(mfrow=c(2, 2))
plot(res, "SMI")
plot(res, "DAX")
plot(res, "FTSE")
plot(res, "CAC")
