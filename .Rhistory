install.packages("DEoptim")
install.packages("DEoptim")
bayesianoptimization::random_search_opt(objective = objective, nb_iter = 150,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
bayesianoptimization::msnlminb(objective = objective, nb_iter = 150,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
warnings()
?try
objective <- function(w)
{
if (sum(w) == 0)
{
w <- w + 1e-2
}
w_ <- w/sum(w)
RET_t <- drop(matrix_returns%*%w_)
print(RET_t)
ret_t <- log(1 + RET_t)
return(-sum(ret_t)/sd(ret_t))
}
objective <- function(w)
{
if (sum(w) == 0)
{
w <- w + 1e-2
}
w_ <- w/sum(w)
RET_t <- drop(matrix_returns%*%w_)
print(RET_t)
ret_t <- log(1 + RET_t)
return(-sum(ret_t)/sd(ret_t))
}
stats::nlminb(start = c(0.25, 0.25, 0.25, 0.25), objective = objective)
bayesianoptimization::msnlminb(objective = objective, nb_iter = 150,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
warnings()
objective <- function(w)
{
if (sum(w) == 0)
{
w <- w + 1e-2
}
w_ <- w/sum(w)
RET_t <- drop(matrix_returns%*%w_)
ret_t <- try(log(1 + RET_t), silent = TRUE)
if (sum(is.na(ret_t)) > 0)
{
return
}
return(-sum(ret_t)/sd(ret_t))
}
stats::nlminb(start = c(0.25, 0.25, 0.25, 0.25), objective = objective)
objective <- function(w)
{
if (sum(w) == 0)
{
w <- w + 1e-2
}
w_ <- w/sum(w)
RET_t <- drop(matrix_returns%*%w_)
ret_t <- try(log(1 + RET_t), silent = TRUE)
if (sum(is.na(ret_t)) > 0)
{
return
}
return(-sum(ret_t)/sd(ret_t))
}
stats::nlminb(start = c(0.25, 0.25, 0.25, 0.25), objective = objective)
bayesianoptimization::msnlminb(objective = objective, nb_iter = 150,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
warnings()
?suppressWarnings
objective <- function(w)
{
if (sum(w) == 0)
{
w <- w + 1e-2
}
w_ <- w/sum(w)
RET_t <- drop(matrix_returns%*%w_)
ret_t <- suppressWarnings(log(1 + RET_t))
if (sum(is.na(ret_t)) > 0)
{
return (1e6)
}
return(-sum(ret_t)/sd(ret_t))
}
bayesianoptimization::msnlminb(objective = objective, nb_iter = 150,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
bayesianoptimization::random_search_opt(objective = objective, nb_iter = 150,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
DEoptim::DEoptim(fn = objective,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
?DEoptim::DEoptim
res1 <- stats::nlminb(start = c(0.25, 0.25, 0.25, 0.25), objective = objective)
res2 <- bayesianoptimization::msnlminb(objective = objective, nb_iter = 150,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
res3 <- bayesianoptimization::random_search_opt(objective = objective, nb_iter = 150,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
res4 <- DEoptim::DEoptim(fn = objective,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
res1$par
res1$objective
res2$par
res2$objective
res3$par
res3$objective
res3 <- bayesianoptimization::random_search_opt(objective = objective, nb_iter = 250,
lower = rep(-1, n_assets),
upper = rep(1, n_assets))
res3$objective
res4$membe
str(res4)
res3$par
res3$objective
res4$optim$bestmem
res4$optim$bestval
res1$par
res1$objective
res2$par
res2$objective
res3$par
res3$objective
res4$optim$bestmem
res4$optim$bestval
res1
res2
res3
res4
15/17-1
253+85
85/253+85
85/(253+85)
?any
X
X <- matrix(rnorm(15), ncol = 3)
X
rowSums(X) > 0
colSums(X) > 0
colSums(X) != 0
all(colSums(X) != 0)
X[,2] <- rep(0, 5)
X
all(colSums(X) != 0)
colSums(X) != 0
books
reticulate::repl_python()
?optm
?optim
?norm
bayesianoptimization::msnlminb
?DEoptim::DEoptim
caret::createTimeSlices(1:10, initialWindow = 3, horizon = 2, fixedWindow = FALSE)
index <- caret::createTimeSlices(1:10, initialWindow = 3, horizon = 2, fixedWindow = FALSE)
index[1:floor(0.8*8)]
index <- caret::createTimeSlices(1:10, initialWindow = 3, horizon = 2, fixedWindow = FALSE)
index$train[1:floor(0.8*8)]
index
index$train[1:floor(0.8*8)]
index$train[[1:floor(0.8*8)]]
index <- caret::createTimeSlices(1:414, initialWindow = 28, horizon = 28, fixedWindow = FALSE)
?stats::nlminb
index <- caret::createTimeSlices(1:414, initialWindow = 28, horizon = 28, fixedWindow = FALSE)
str(index)
index$train
index$train[[1]]
index$train[[2]]
index$train[[3]]
index$test[[1]]
index$test[[2]]
index$test[[3]]
?setTxtProgressBar
?seq
10^seq(from = -5, to = 5, by = 1)
10^seq(from = -5, to = 5, by = 0.5)
?nlminb
length(10^seq(from = -5, to = 5, by = 0.5))
paste0("slice", 1:n_slices)
paste0("slice", 1:10)
?stats::nlminb
knitr::opts_chunk$set(echo = TRUE)
10^seq(from = -5, to = 5, by = 0.5)
10^seq(from = -5, to = 5, by = 1)
?stats::nlminb
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=5)$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=5, method = "rw")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=5, method = "mean")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=5, method = "median")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=5, method = "median")$sims
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$sims
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]]
library(ahead)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]]
remove.packages("ahead")
library(ahead)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$residuals
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$residuals)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$residuals)
apply(fpp::insurance, 2, mean)
apply(fpp::insurance, 2, median)
sample.int(10, size = 5, replace = TRUE)
sample.int(10, size = 5, replace = TRUE)
sample.int(10, size = 5, replace = TRUE)
sample.int(10, size = 5, replace = TRUE)
sample.int(10, size = 5, replace = TRUE)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$residuals)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$residuals)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$mean)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$mean)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]])
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$sims[[1]])
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$sims[[1]])
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$sims[[1]]$lower)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$lower)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$lower)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$residuals)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$residuals)
?vector
vector("list", 3)
devtools::load_all(".")
library(ahead)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$residuals)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$residuals)
head(fpp::insurance)
fpp::insurance
library(ahead)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$sims[[1]])
fpp::insurance
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$sims[[1]])
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$sims[[1]])
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]])
library(ahead)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]])
library(ahead)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]])
library(ahead)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]])
library(ahead)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]])
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$sims[[1]]
library(ahead)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]]
library(ahead)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$residuals)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$residuals)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$mean)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$mean)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]])
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$sims[[1]])
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$residuals)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$residuals)
head(ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$residuals)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "rw")$residuals
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$residuals
library(ahead)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "mean")$sims[[1]]
ahead::basicf(fpp::usconsumption, type_pi = "bootstrap", B=3, method = "median")$sims[[1]]
ahead::basicf(fpp::usconsumption, type_pi = "bootstrap", B=3, method = "mean")$sims[[1]]
devtools::load_all(".")
library(ahead)
ahead::basicf(fpp::usconsumption, type_pi = "bootstrap", B=3, method = "mean")$sims[[1]]
ahead::basicf(fpp::usconsumption, type_pi = "bootstrap", B=3, method = "median")$sims[[1]]
library(ahead)
library(ahead)
ahead::basicf(fpp::usconsumption, type_pi = "bootstrap", B=3, method = "median")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=3, method = "median")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean")$sims[[1]]
13.60435-0.317277
13.28744 +0.000365
13.60435 -0.317277
13.28744-0.000365
as.numeric("method")
as.numeric(as.character("mran"))
library(ahead)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "rw")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "rw")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean")$mean
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median")$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median", h=3)$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean", h=3)$sims[[1]]
13.60435-3.300197
13.28744-2.983285
?sample.int
library(ahead)
?ahead::basicf
par(mfrow=c(2, 2))
res <- ahead::basicf(fpp::insurance, h=10)
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, method="rw", h=10)
plot(res, "TV.advert")
plot(res, "Quotes")
library(ahead)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean", h=3)$lower
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median", h=3)$lower
library(ahead)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median", h=3)$lower
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean", h=3)$lower
length("ahda")
length("ahdafé")
nchar("ahdafé")
nchar("ahdaf")
library(ahead)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean", h=3)$lower
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median", h=3)$lower
library(ahead)
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean", h=3)$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median", h=3)$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "rw", h=3)$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "rw", h=5)$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "mean", h=5)$sims[[1]]
ahead::basicf(fpp::insurance, type_pi = "bootstrap", B=2, method = "median", h=5)$sims[[1]]
res <- ahead::basicf(fpp::insurance, h=10)
plot(res, "TV.advert")
plot(res, "Quotes")
res <- ahead::basicf(fpp::insurance, method="rw", h=10)
plot(res, "TV.advert")
plot(res, "Quotes")
res1 <- ahead::basicf(fpp::insurance, method="rw", h=10)
res2 <- ahead::basicf(fpp::insurance, method="median", h=10)
res1$lower
res2$lower
x
X
?lm.fit
require(utils)
set.seed(129)
n <- 7 ; p <- 2
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
X
MASS::ginv(X)
require(utils)
set.seed(129)
n <- 7 ; p <- 5
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
X[,2] <- 0
X
MASS::ginv(X)
X%*%MASS::ginv(X)
require(utils)
set.seed(129)
n <- 7 ; p <- 7
X <- matrix(rnorm(n * p), n, p) # no intercept!
y <- rnorm(n)
X%*%MASS::ginv(X)
X
X[,2] <- 0
X
X%*%MASS::ginv(X)
X
MASS::ginv(X)
X%*%MASS::ginv(X)
X
solve(X)
MASS::ginv(X)
diag(3)
solve(X + 1e-6*diag(7))
solve(X + 1e-8*diag(7))
X%*%solve(X + 1e-8*diag(7))
X%*%solve(X + 1e-9*diag(7))
X%*%solve(X + 1e-16*diag(7))
X%*%solve(X + 1e-10*diag(7))
knitr::opts_chunk$set(echo = TRUE)
0^seq(from = -10, to = 10, by = 0.5)
10^seq(from = -10, to = 10, by = 0.5)
?proc.time
?glmnet::cv.glmnet
rnorm(n = 1, mean = 0, sd = 0.01)
rnorm(n = 1, mean = 0, sd = 0.01)
rnorm(n = 1, mean = 0, sd = 0.01)
rnorm(n = 1, mean = 0, sd = 0.01)
0.01/100
0.0001 == 1e-4
getwd()
?ahead::dynrmf
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95))
plot(dynrmf(AirPassengers, h=20, level=95))
plot(dynrmf(lynx, h=20, level=95))
plot(dynrmf(WWWusage, h=20, level=95))
plot(dynrmf(Nile, h=20, level=95))
plot(dynrmf(fdeaths, h=20, level=95))
library(ahead)
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95))
plot(dynrmf(AirPassengers, h=20, level=95))
plot(dynrmf(lynx, h=20, level=95))
plot(dynrmf(WWWusage, h=20, level=95))
plot(dynrmf(Nile, h=20, level=95))
plot(dynrmf(fdeaths, h=20, level=95))
dynrmf(USAccDeaths, h=20, level=95)
dynrmf(USAccDeaths, h=20, level=95, fit_params = list(lambda=0.1))
dynrmf(USAccDeaths, h=20, level=95, fit_params = list(lambda=0.01))
caret::createTimeSlices(1:10, horizon = 2, fixedWindow = FALSE)
caret::createTimeSlices(1:10, horizon = 2, fixedWindow = FALSE, initialWindow = 3)
slices <- caret::createTimeSlices(1:10, horizon = 2, fixedWindow = FALSE, initialWindow = 3)
length(slices$train)
length(slices$test)
slices$test
slices$test[[1]]
slices$train[[1]]
slices$train
require(fpp)
print(ahead::ridge2f(fpp::insurance)$mean)
install.packages(c("vars", "cclust", "fGarch"))
install.packages("fpp")
install.packages("randomForest")
library(ahead)
library(ahead)
require(fpp)
print(ahead::ridge2f(fpp::insurance)$mean)
print(ahead::ridge2f(fpp::usconsumption)$lower)
AirPassengers
matrix(AirPassengers, ncol=1)
?`mts-class`
?ts
ts(matrix(AirPassengers, ncol=1), frequency = frequency(AirPassengers), start = start(AirPassengers))
dim(ts(matrix(AirPassengers, ncol=1), frequency = frequency(AirPassengers), start = start(AirPassengers)))
x <- ts(matrix(AirPassengers, ncol=1), frequency = frequency(AirPassengers), start = start(AirPassengers))
dim(x)
ahead::ridge2f(x)
x <- matrix(AirPassengers, ncol=1)
ahead::ridge2f(x)
is.matrix(x)
?ahead::ridge2f
x <- cbind(1:length(AirPassengers), matrix(AirPassengers, ncol=1))
head(x)
x <- ts(cbind(1:length(AirPassengers), matrix(AirPassengers, ncol=1)), frequency = frequency(AirPassengers), start = start(AirPassengers))
x
ahead::ridge2f(x)
x <- matrix(AirPassengers, ncol=1)
x
ahead::ridge2f(x)
library(forecast)
fpp::insurance
ahead::(fpp::insurance)
ahead::ridge2f(fpp::insurance)
profvis::profiler(ahead::ridge2f(fpp::insurance))
profvis::profvis(ahead::ridge2f(fpp::insurance))
x
x <- ts(matrix(rnorm(n = 2000), nrow = 100, ncol = 20))
profvis::profvis(ahead::ridge2f(x))
ahead::ridge2f(x)
profvis::profvis(ahead::ridge2f(x, h = 20))
install.packages("microbenchmark")
profvis::profvis(ahead::ridge2f(x, h = 100))
library(microbenchmark)
microbenchmark::microbenchmark(ahead::ridge2f(x, h = 100))
dim(x)
x <- ts(matrix(rnorm(n = 20000), nrow = 100, ncol = 200))
dim(x)
profvis::profvis(ahead::ridge2f(x, h = 100))
library(ahead)
?ahead::dynrmf
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95))
par(mfrow=c(3, 2))
plot(dynrmf(USAccDeaths, h=20, level=95))
plot(dynrmf(AirPassengers, h=20, level=95))
plot(dynrmf(lynx, h=20, level=95))
plot(dynrmf(WWWusage, h=20, level=95))
plot(dynrmf(Nile, h=20, level=95))
plot(dynrmf(fdeaths, h=20, level=95))
par(mfrow=c(2, 2))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "linear"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "polynomial"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "radial"), predict_func = predict))
plot(dynrmf(fdeaths, h=20, level=95, fit_func = e1071::svm,
fit_params = list(kernel = "sigmoid"), predict_func = predict))
?ahead::loessf
ahead::loessf
library(ahead)
plot(loessf(USAccDeaths, h=20, level=95))
plot(loessf(Nile, h=20, level=95))
library(ahead)
library(ahead)
48*90
